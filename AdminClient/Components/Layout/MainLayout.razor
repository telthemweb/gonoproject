@inherits LayoutComponentBase
@inject NavigationManager _Navigation;
@inject AuthenticationStateProvider _authStateProvider;
@inject ISystemmoduleService _service;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />  <!-- Ensure this is added -->
<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Dark">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudMenu FullWidth="true">
                    <ActivatorContent>
                        <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Primary" T="object">Welcome : @Name</MudChip>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="()=>Logout()">Sign Out</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                HVSM
            </MudText>
        </MudDrawerHeader>
        <NavMenu modules="modules" />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="my-5 pt-2">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    bool _drawerOpen = true;
    private string Name { get; set; }
    private List<Systemmodule> modules { get; set; }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (!authState.User.Identity.IsAuthenticated)
        {
            // _Navigation.NavigateTo("/Login");
        }
        else
        {
            Name = authState.User.Identity.Name;
        }
        try
        {
            modules = await _service.GetCached();
        }
        catch (Exception ex)
        {
            _Navigation.NavigateTo("/Login", true);
        }

        base.OnInitializedAsync();
    }

    private async Task Logout()
    {
        _Navigation.NavigateTo("/Login");
    }
}
