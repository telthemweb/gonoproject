@page "/maritalstatuses"
@using Application.Dto
@inject IMaritalStatusService _service;
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [StreamRendering]
@attribute [Authorize]

<MudPaper Class="mt-2 mb-2" Outlined="true">
    <MudBreadcrumbs Items="_items">
        <SeparatorTemplate>
            <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Size="Size.Small" />
        </SeparatorTemplate>
    </MudBreadcrumbs>
</MudPaper>

@if (maritalstatuses == null)
{
    <MudSkeleton Width="100%" Height="30px" />
    <MudSkeleton Width="100%" Height="30px" />
    <MudSkeleton Width="100%" Height="30px" />
}
else
{
    <MudTable Outlined="true" Items="@filteredPaymentItems" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped">
        <ToolBarContent>
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Size="Size.Small" Class="rounded-5" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Primary" OnClick="OpenDialog">Add New</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Name</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd class="d-flex flex-row-reverse">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" Color="Color.Info" aria-label="edit" OnClick="() => EditDialog(context)"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" aria-label="delete" OnClick="() => DeleteRecord(context)"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private List<BreadcrumbItem> _items = new()
    {
        new BreadcrumbItem("Home", href: "/Home"),
        new BreadcrumbItem("Marital Status", href: null, disabled: true)
    };

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private List<MaritalStatus>? maritalstatuses;
    private MaritalStatusModifyDto dto = new();
    private string searchString = "";
    private MaritalStatus? selectedItem;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private IEnumerable<MaritalStatus> filteredPaymentItems => maritalstatuses?.Where(item => FilterFunc(item, searchString)) ?? Enumerable.Empty<MaritalStatus>();

    private bool FilterFunc(MaritalStatus element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task OpenDialog()
    {
        var title = "New Marital Status";
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var parameters = new DialogParameters
        {
            { nameof(Add.dto), new MaritalStatusModifyDto() }
        };

        var dialog = await DialogService.ShowAsync<Add>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (bool.TryParse(result.Data.ToString(), out bool success) && success)
            {
                await GetData();
            }
        }
    }

    private async Task EditDialog(MaritalStatus statuse)
    {
        var title = "Update Marital Status";
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true };
        var parameters = new DialogParameters
        {
            { nameof(Add.dto), new MaritalStatusModifyDto { Id = statuse.Id, Name = statuse.Name } }
        };

        var dialog = await DialogService.ShowAsync<Add>(title, parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            if (bool.TryParse(result.Data.ToString(), out bool success) && success)
            {
                await GetData();
            }
        }
    }

    private async Task DeleteRecord(MaritalStatus statuse)
    {
        var result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting cannot be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result == true)
        {
            var response = await _service.Delete(statuse.Id);
            if (response.Status == ResponseStatus.SUCCESS)
            {
                Snackbar.Add(response.Message, Severity.Success);
                await GetData();
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
    }

    private async Task GetData()
    {
        var response = await _service.GetAll();
        maritalstatuses = response;
        StateHasChanged();
    }
}
