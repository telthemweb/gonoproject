@using Application.Dto
@inject IVisitorService _service;
@inject IGenderService _genderservice;
@inject ITitleService _titleservice;
@inject INationalityService _countryservice;
@inject ICityService _cityservice;
@inject IProvinceService _provinceservice;
@inject IMaritalStatusService _mservice;
@inject ISnackbar Snackbar

<EditForm Model="@formdto" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog>

        <DialogContent>
            <MudGrid>
                <MudItem md="6" sm="12" xs="12">
                    <MudSelect T="int" Label="Choose Title" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@formdto.TitleId" For="@(() => @formdto.TitleId)">
                        @if (titles != null)
                        {
                            @foreach (var item in titles)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>
                </MudItem>
                <MudItem md="6" sm="12" xs="12">
                    <MudTextField Label="Name"
                                  @bind-Value="formdto.FirstName" Variant="Variant.Outlined" For="@(() => formdto.FirstName)" />
                </MudItem>

            </MudGrid>
            <MudGrid>
                <MudItem md="6" sm="12" xs="12">
                    <MudTextField Label="Surname"
                                  @bind-Value="formdto.LastName" Variant="Variant.Outlined" For="@(() => formdto.LastName)" />
                </MudItem>
                <MudItem md="6" sm="12" xs="12">
                    <MudTextField Label="Previous Name"
                                  @bind-Value="formdto.PreviousName" Variant="Variant.Outlined" For="@(() => formdto.PreviousName)" />
                </MudItem>

            </MudGrid>
            <MudGrid>
                <MudItem md="6" sm="12" xs="12">
                    <MudSelect T="int" Label="Choose Gender" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@formdto.GenderId" For="@(() => @formdto.GenderId)">
                        @if (genders != null)
                        {
                            @foreach (var item in genders)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>
                </MudItem>
                <MudItem md="6" sm="12" xs="12">
                    <MudTextField Label="Date of Birth"
                                  @bind-Value="formdto.Dob" Variant="Variant.Outlined" InputType="InputType.Date" For="@(() => formdto.Dob)" />
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem md="6" sm="12" xs="12">
                    <MudSelect T="int" Label="Select Country" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@formdto.NationalityId" For="@(() => @formdto.NationalityId)">
                        @if (nationalities != null)
                        {
                            @foreach (var item in nationalities)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>
                </MudItem>
                <MudItem md="6" sm="12" xs="12">
                    <MudTextField Label="National ID"
                                  @bind-Value="formdto.IDnumber" Variant="Variant.Outlined" InputType="InputType.Text" For="@(() => formdto.IDnumber)" />
                </MudItem>
            </MudGrid>
            <MudGrid>
                <MudItem md="6" sm="12" xs="12">
                    <MudSelect T="int" Label="Select Province" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@formdto.ProvinceId" For="@(() => @formdto.ProvinceId
)">
                        @if (provinces != null)
                        {
                            @foreach (var item in provinces)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>
                </MudItem>
                <MudItem md="6" sm="12" xs="12">
                    <MudSelect T="int" Label="Select City/Town" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@formdto.CityId" For="@(() => @formdto.CityId)">
                        @if (cities != null)
                        {
                            @foreach (var item in cities)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudGrid>
                <MudItem md="12" sm="12" xs="12">
                    <MudSelect T="int" Label="Select Marital Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@formdto.MaritalStatusId" For="@(() => @formdto.MaritalStatusId)">
                        @if (maritalStatuses != null)
                        {
                            @foreach (var item in maritalStatuses)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>
                </MudItem>


            </MudGrid>

          

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing...</MudText>
                }
                else
                {
                    <MudText>Submit</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>

</EditForm>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public VisitorModifyDto dto { get; set; }

    [Parameter]
    public string token { get; set; } = string.Empty;
    private bool _processing = false;
    private VisitorModifyDto formdto { get; set; } = new();


    private List<Gender>? genders { get; set; }
    private List<Title>? titles { get; set; }
    private List<Nationality>? nationalities { get; set; }
    private List<Province>? provinces { get; set; }
    private List<City>? cities { get; set; }
    private List<MaritalStatus>? maritalStatuses { get; set; }
    protected override async Task OnInitializedAsync()
    {
        genders = await _genderservice.GetAll();
        titles = await _titleservice.GetAll();
        nationalities = await _countryservice.GetAll();
        provinces = await _provinceservice.GetAll();
        cities = await _cityservice.GetAll();
        maritalStatuses = await _mservice.GetAll();
    }
    protected override Task OnParametersSetAsync()
    {
        formdto = dto;
        return base.OnParametersSetAsync();
    }
    private async Task OnValidSubmit()
    {
        _processing = true;
        try
        {
            var response = await _service.Modify(dto);
            _processing = false;
            if (response != null && response.Status == ResponseStatus.SUCCESS)
            {

                Snackbar.Add(response.Message, Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
                MudDialog.Close(DialogResult.Ok(false));
            }
        }
        catch (Exception ex)
        {

            Snackbar.Add(ex.Message, Severity.Error);
            MudDialog.Close(DialogResult.Ok(false));
        }

    }
    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
}