@page "/Account/Login"
@page "/Login"
@layout PlainLayout
@inject AuthenticationStateProvider _authStateProvider;
@inject NavigationManager _Navigation;
@inject IAuthService _service;
@inject ISnackbar SnackBar
@inject IUnitOfWork  _unit;
@using System.Security.Claims
@using Application.Contracts.Persistence
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
 @inject UserManager<ApplicationUser> _usermanager;
 @inject RoleManager<Role> _rolemanager;
@rendermode InteractiveServer
<PageTitle>Auth</PageTitle>

<EditForm Model="@_requestDto" OnValidSubmit="AuthAsync">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center">
        <MudItem md="5" xs="12" sm="7" Class="mt-16">

            <MudCard Outlined="true">
                <MudCardContent>
                    <MudPaper Class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">

                        <MudText Typo="Typo.h6">
                            HVSM
                        </MudText>
                    </MudPaper>
                    <MudGrid>
                        <MudItem md="12" sm="12" xs="12">
                            <MudTextField Label="Username" Variant="Variant.Outlined"
                                          @bind-Value="_requestDto.Email" For="@(() => _requestDto.Email)" />
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem md="12" sm="12" xs="12">
                            <MudTextField Label="Password" Class="mt-3" T="string" InputType="InputType.Password" Variant="Variant.Outlined"
                                          @bind-Value="_requestDto.Password" For="@(() => _requestDto.Password)" />
                        </MudItem>
                    </MudGrid>


                </MudCardContent>
                <MudCardActions>

                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" DisableElevation="true" Color="Color.Warning" FullWidth="true">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Processing...</MudText>
                        }
                        else
                        {
                            <MudText>Login</MudText>
                        }
                    </MudButton>

                </MudCardActions>
            </MudCard>


        </MudItem>

    </MudGrid>
</EditForm>


@code {

    private AuthRequestDto _requestDto { get; set; } = new();
    private bool _processing = false;

    private List<string> errors { get; set; } = new List<string>();
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }

    [CascadingParameter]
    public HttpContext? httpContext { get; set; }
    private async Task AuthAsync()
    {
        _processing = true;
        /*    var response = await _service.Login(_requestDto);
            if (response.Status==ResponseStatus.ERROR)
                {
                SnackBar.Add(response.Message, Severity.Error);
            }
            else
            {*/
        var user = await _unit.applicationuserrepository.GetAsync(q=>q.Email==_requestDto.Email);

        if (user == null)
        {
            _processing = false;
            errors.Add("Invalid login details");
            return;
        }
        var authresponse = await _usermanager.CheckPasswordAsync(user, _requestDto.Password);
        if (authresponse == false)
        {
            _processing = false;
            errors.Add("Invalid login details");
            return;
        }
        else
        {
          //  var roles = await _usermanager.GetRolesAsync(user);
           // await _usermanager.RemoveFromRolesAsync(user, roles);


            AuthResponse authResponse = await _service.GetPermissions(user);

           // await _usermanager.AddToRolesAsync(user,authResponse.Roles);
           
                var customAuthStareProvider = (CustomeAuthenticationStateProvider)_authStateProvider;
                await customAuthStareProvider.UpdateAuthenticationState(authResponse);
                if (ReturnUrl == null)
                {
                    _Navigation.NavigateTo("/Home");
                }
                else
                {
                    _Navigation.NavigateTo(ReturnUrl);
                }
            }

       // }
        //

    }



}
