@page "/systemreports"
@inject IReportService _service
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@attribute [StreamRendering]
@attribute [Authorize]
<PageTitle>System Reports</PageTitle>

<MudContainer Class="mt-5px-5" MaxWidth="MaxWidth.False">
    <MudPaper Class="mt-2 mb-2" Outlined="true">
        <MudBreadcrumbs Items="_items">
            <SeparatorTemplate>
                <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Size="Size.Small" />
            </SeparatorTemplate>
        </MudBreadcrumbs>
    </MudPaper>
    <MudGrid Class="mt-5 mb-lg-5">
        <MudItem xs="12" sm="12" md="12">
           <MudGrid>
                <MudItem xs="12" sm="12" md="4">
                    <MudDatePicker Label="From Date" @bind-Date="fromDate" />
               </MudItem>
                <MudItem xs="12" sm="12" md="4">
                    <MudDatePicker Label="To Date" @bind-Date="toDate" />
                </MudItem>
                <MudItem xs="12" sm="12" md="4">
                    <MudButton OnClick="GetData" Color="Color.Primary">Apply Filter</MudButton>
                </MudItem>
           </MudGrid>

            @if (systemlogs == null)
            {
                <MudSkeleton Width="100%" Height="30px" />
                <MudSkeleton Width="100%" Height="30px" />
                <MudSkeleton Width="100%" Height="30px" />
            }
            else
            {
                <MudTable Outlined="true" Items="@filteredlogs" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped">
                    <ToolBarContent>
                        <MudText>SYSTEM CLOCKINGS</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchLogString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Ref#</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Gender</MudTh>
                        <MudTh>City</MudTh>
                        <MudTh>Purpose</MudTh>
                        <MudTh>Date Checkin</MudTh>
                        <MudTh>Time Checkin</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">@context.visitor?.VisitorNumber</MudTd>
                        <MudTd DataLabel="Name">@context.visitor?.FullName</MudTd>
                        <MudTd DataLabel="Name">@context.visitor?.Gender?.Name</MudTd>
                        <MudTd DataLabel="Name">@context.visitor?.City?.Name</MudTd>
                        <MudTd DataLabel="Name">@context.Purposeofvisit</MudTd>
                        <MudTd DataLabel="Name">@context.DateCheckin</MudTd>
                        <MudTd DataLabel="Name">@context.TimeCheckin</MudTd>
                        <MudTd DataLabel="Name">
                            @if (context.Status == "CHECKOUT")
                            {
                                <MudChip Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" T="object">
                                    <MudText>CHECKOUT</MudText>
                                </MudChip>
                            }
                            else
                            {
                                <MudChip Icon="@Icons.Material.Filled.Close" Color="Color.Error" T="object">
                                    <MudText>CHECKIN</MudText>
                                </MudChip>
                            }
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private List<BreadcrumbItem> _items = new()
    {
        new BreadcrumbItem("Home", href: "/Home"),
        new BreadcrumbItem("System Reports", href: null, disabled: true)
    };

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;

    private List<Systemlog>? systemlogs;
    private string searchLogString = "";

    private DateTime? fromDate;
    private DateTime? toDate;

    private IEnumerable<Systemlog> filteredlogs => systemlogs?.Where(item => FilterFunc(item, searchLogString)) ?? Enumerable.Empty<Systemlog>();

    private bool FilterFunc(Systemlog element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.visitor.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.visitor.City.Name.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.visitor.Gender.Name.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task GetData()
    {
        if (fromDate.HasValue && toDate.HasValue)
        {
            systemlogs = await _service.GetVisitorlogReports(fromDate, toDate);
        }
        else
        {
            Snackbar.Add("Please select a valid date range.", Severity.Warning);
        }
        StateHasChanged();
    }
}
